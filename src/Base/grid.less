//https://gist.github.com/stecman/b83cecbf49a151d3f6e3
// Based on Semantic.gs
//

// Defaults
@columns: 12;
@gutter-width: 12px;
@total-width: 100%;

// Uncomment these two lines and the star-hack width/margin lines below to enable sub-pixel
// fix for IE6 & 7. See http://tylertate.com/blog/2012/01/05/subpixel-rounding.html
// @min-width: 960;
// @correction: 0.5 / @min-width * 100 * 1%;

// The micro clearfix http://nicolasgallagher.com/micro-clearfix-hack/
.clearfix() {
	*zoom:1;

	&:before,
	&:after {
		content:"";
		display:table;
	}
	&:after {
		clear:both;
	}
}

html {
	box-sizing: border-box;
	* {
		box-sizing: border-box;
	}
}

body {
	margin: 0;
	padding: 0;
	width: 100%;
	box-sizing: border-box;
	position: relative;
	.clearfix();
}

.container, .container-fluid {
  padding-right: 15px;
  padding-left: 15px;
  margin-right: auto;
  margin-left: auto;
  width: 960px;
  max-width: 100%;
}

.container-fluid{
  width: 1100px;
}

.row {
	margin-right: -6px;
	margin-left: -6px;
	.clearfix();
}

// Set grid definition for scope
//
// Calling this overrides any existing grid mixin definitions in a scope. It can be used
// to set the grid settings for a scope, without passing extra parameters with use of .column()
.grid(@columns: @columns, @total-width: @total-width, @gutter-width: @gutter-width) {

	// Row container to subtract outer edge padding
	// Use is completely optional, but this useful to acomodate some designs
	.row(@gutter-width:@gutter-width) {
		margin-left: -@gutter-width / 2;
		margin-right: -@gutter-width / 2;
	}

	// A container at the specified grid width, without padding
	.column-layout(@x, @columns:@columns, @total-width:@total-width, @float:left) {
		float: @float;
		width: (@total-width/@columns) * @x;
	}

	// A column size container, centered automatically by margin
	.column-centered(@x, @columns:@columns, @total-width:@total-width) {
		width: (@total-width/@columns) * @x;
		margin-left: auto;
		margin-right: auto;
	}

	// Gutter padding for a column
	.column-padding(@gutter-width:@gutter-width) {
		@padding: (@gutter-width / 2);
		padding-left: @padding;
		padding-right: @padding;
	}

	// Column with padding
	.column(@x, @columns:@columns, @gutter-width:@gutter-width, @total-width:@total-width, @float:left) {
		.column-layout(@x, @columns, @total-width, @float);
		.column-padding(@gutter-width);
		box-sizing: border-box;
		position: relative;
		min-height: 1px;
	}

	// Add x columns of margin-left to the element
	.push(@x:1) {
		margin-left: (@total-width/@columns) * @x;
	}

	// Add x columns of margin-right to the element
	// This really needs a better name
	.pull(@x:1) {
		margin-right: (@total-width/@columns) * @x;
	}
}

// Clear previously applied grid styles
.reset-grid(@margin:auto) {
	display: block;
	float: none;
	width: auto;
	margin-left: @margin;
	margin-right: @margin;
}

.grid(); // Define global grid mixins (using defaults)

// Grid classes for cases where you just want a column size, without adding more CSS
// This should probably go in project space so that break points can be customised
.col-lg-1 { .column(1) }
.col-lg-2 { .column(2) }
.col-lg-3 { .column(3) }
.col-lg-4 { .column(4) }
.col-lg-5 { .column(5) }
.col-lg-6 { .column(6) }
.col-lg-7 { .column(7) }
.col-lg-8 { .column(8) }
.col-lg-9 { .column(9) }
.col-lg-10 { .column(10) }
.col-lg-11 { .column(11) }
.col-lg-12 { .column(12) }

@media @tablet {
	.col-sm-1 { .column(1) }
	.col-sm-2 { .column(2) }
	.col-sm-3 { .column(3) }
	.col-sm-4 { .column(4) }
	.col-sm-5 { .column(5) }
	.col-sm-6 { .column(6) }
	.col-sm-7 { .column(7) }
	.col-sm-8 { .column(8) }
	.col-sm-9 { .column(9) }
	.col-sm-10 { .column(10) }
	.col-sm-11 { .column(11) }
	.col-sm-12 { .column(12) }
}

@media @mobile {
	.col-xs-1,
	.col-xs-2,
	.col-xs-3,
	.col-xs-4,
	.col-xs-5,
	.col-xs-6,
	.col-xs-7,
	.col-xs-8,
	.col-xs-9,
	.col-xs-10,
	.col-xs-11,
	.col-xs-12 {
		.reset-grid();
	}
}
